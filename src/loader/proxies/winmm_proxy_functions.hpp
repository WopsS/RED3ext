#pragma once

#include <Windows.h>

// Order is important for "mmsystem.h" and "mmddk.h".
#include <mmsystem.h>
// After "mmsystem.h".
#include <mmddk.h>

namespace red3ext
{
using close_driver_type = decltype(&CloseDriver);
using open_driver_type = decltype(&OpenDriver);
using send_driver_message_type = decltype(&SendDriverMessage);
using drv_get_module_handle_type = decltype(&DrvGetModuleHandle);
using get_driver_module_handle_type = decltype(&GetDriverModuleHandle);
using def_driver_proc_type = decltype(&DefDriverProc);
using driver_callback_type = decltype(&DriverCallback);
using play_sound_type = decltype(&PlaySoundA);
using play_sound_a_type = decltype(&PlaySoundA);
using play_sound_w_type = decltype(&PlaySoundW);
using aux_get_num_devs_type = decltype(&auxGetNumDevs);
using aux_get_dev_caps_a_type = decltype(&auxGetDevCapsA);
using aux_get_dev_caps_w_type = decltype(&auxGetDevCapsW);
using aux_set_volume_type = decltype(&auxSetVolume);
using aux_get_volume_type = decltype(&auxGetVolume);
using aux_out_message_type = decltype(&auxOutMessage);
using joy_get_pos_type = decltype(&joyGetPos);
using joy_get_threshold_type = decltype(&joyGetThreshold);
using joy_release_capture_type = decltype(&joyReleaseCapture);
using joy_set_capture_type = decltype(&joySetCapture);
using joy_set_threshold_type = decltype(&joySetThreshold);
using joy_config_changed_type = decltype(&joyConfigChanged);
using joy_get_pos_ex_type = decltype(&joyGetPosEx);
using joy_get_num_devs_type = decltype(&joyGetNumDevs);
using joy_get_dev_caps_a_type = decltype(&joyGetDevCapsA);
using joy_get_dev_caps_w_type = decltype(&joyGetDevCapsW);
using mci_send_command_a_type = decltype(&mciSendCommandA);
using mci_send_command_w_type = decltype(&mciSendCommandW);
using mci_send_string_a_type = decltype(&mciSendStringA);
using mci_send_string_w_type = decltype(&mciSendStringW);
using mci_get_device_id_a_type = decltype(&mciGetDeviceIDA);
using mci_get_device_id_w_type = decltype(&mciGetDeviceIDW);
using mci_get_device_id_from_element_id_a_type = decltype(&mciGetDeviceIDFromElementIDA);
using mci_get_device_id_from_element_id_w_type = decltype(&mciGetDeviceIDFromElementIDW);
using mci_get_error_string_a_type = decltype(&mciGetErrorStringA);
using mci_get_error_string_w_type = decltype(&mciGetErrorStringW);
using mci_set_yield_proc_type = decltype(&mciSetYieldProc);
using mci_get_creator_task_type = decltype(&mciGetCreatorTask);
using mci_get_yield_proc_type = decltype(&mciGetYieldProc);
using mci_get_driver_data_type = decltype(&mciGetDriverData);
using mci_load_command_resource_type = decltype(&mciLoadCommandResource);
using mci_set_driver_data_type = decltype(&mciSetDriverData);
using mci_driver_yield_type = decltype(&mciDriverYield);
using mci_driver_notify_type = decltype(&mciDriverNotify);
using mci_free_command_resource_type = decltype(&mciFreeCommandResource);
using midi_out_get_num_devs_type = decltype(&midiOutGetNumDevs);
using midi_stream_open_type = decltype(&midiStreamOpen);
using midi_stream_close_type = decltype(&midiStreamClose);
using midi_stream_property_type = decltype(&midiStreamProperty);
using midi_stream_position_type = decltype(&midiStreamPosition);
using midi_stream_out_type = decltype(&midiStreamOut);
using midi_stream_pause_type = decltype(&midiStreamPause);
using midi_stream_restart_type = decltype(&midiStreamRestart);
using midi_stream_stop_type = decltype(&midiStreamStop);
using midi_connect_type = decltype(&midiConnect);
using midi_disconnect_type = decltype(&midiDisconnect);
using midi_out_get_dev_caps_a_type = decltype(&midiOutGetDevCapsA);
using midi_out_get_dev_caps_w_type = decltype(&midiOutGetDevCapsW);
using midi_out_get_volume_type = decltype(&midiOutGetVolume);
using midi_out_set_volume_type = decltype(&midiOutSetVolume);
using midi_out_get_error_text_a_type = decltype(&midiOutGetErrorTextA);
using midi_out_get_error_text_w_type = decltype(&midiOutGetErrorTextW);
using midi_out_open_type = decltype(&midiOutOpen);
using midi_out_close_type = decltype(&midiOutClose);
using midi_out_prepare_header_type = decltype(&midiOutPrepareHeader);
using midi_out_unprepare_header_type = decltype(&midiOutUnprepareHeader);
using midi_out_short_msg_type = decltype(&midiOutShortMsg);
using midi_out_long_msg_type = decltype(&midiOutLongMsg);
using midi_out_reset_type = decltype(&midiOutReset);
using midi_out_cache_patches_type = decltype(&midiOutCachePatches);
using midi_out_cache_drum_patches_type = decltype(&midiOutCacheDrumPatches);
using midi_out_get_id_type = decltype(&midiOutGetID);
using midi_out_message_type = decltype(&midiOutMessage);
using midi_in_get_num_devs_type = decltype(&midiInGetNumDevs);
using midi_in_get_dev_caps_a_type = decltype(&midiInGetDevCapsA);
using midi_in_get_dev_caps_w_type = decltype(&midiInGetDevCapsW);
using midi_in_get_error_text_a_type = decltype(&midiInGetErrorTextA);
using midi_in_get_error_text_w_type = decltype(&midiInGetErrorTextW);
using midi_in_open_type = decltype(&midiInOpen);
using midi_in_close_type = decltype(&midiInClose);
using midi_in_prepare_header_type = decltype(&midiInPrepareHeader);
using midi_in_unprepare_header_type = decltype(&midiInUnprepareHeader);
using midi_in_add_buffer_type = decltype(&midiInAddBuffer);
using midi_in_start_type = decltype(&midiInStart);
using midi_in_stop_type = decltype(&midiInStop);
using midi_in_reset_type = decltype(&midiInReset);
using midi_in_get_id_type = decltype(&midiInGetID);
using midi_in_message_type = decltype(&midiInMessage);
using mixer_get_num_devs_type = decltype(&mixerGetNumDevs);
using mixer_get_dev_caps_a_type = decltype(&mixerGetDevCapsA);
using mixer_get_dev_caps_w_type = decltype(&mixerGetDevCapsW);
using mixer_open_type = decltype(&mixerOpen);
using mixer_close_type = decltype(&mixerClose);
using mixer_message_type = decltype(&mixerMessage);
using mixer_get_line_info_a_type = decltype(&mixerGetLineInfoA);
using mixer_get_line_info_w_type = decltype(&mixerGetLineInfoW);
using mixer_get_id_type = decltype(&mixerGetID);
using mixer_get_line_controls_a_type = decltype(&mixerGetLineControlsA);
using mixer_get_line_controls_w_type = decltype(&mixerGetLineControlsW);
using mixer_get_control_details_a_type = decltype(&mixerGetControlDetailsA);
using mixer_get_control_details_w_type = decltype(&mixerGetControlDetailsW);
using mixer_set_control_details_type = decltype(&mixerSetControlDetails);
using mm_drv_install_type = decltype(&mmDrvInstall);
using mm_task_create_type = decltype(&mmTaskCreate);
using mm_task_block_type = decltype(&mmTaskBlock);
using mm_task_signal_type = decltype(&mmTaskSignal);
using mm_task_yield_type = decltype(&mmTaskYield);
using mm_get_current_task_type = decltype(&mmGetCurrentTask);
using mmio_string_to_fourcc_a_type = decltype(&mmioStringToFOURCCA);
using mmio_string_to_fourcc_w_type = decltype(&mmioStringToFOURCCW);
using mmio_install_io_proc_a_type = decltype(&mmioInstallIOProcA);
using mmio_install_io_proc_w_type = decltype(&mmioInstallIOProcW);
using mmio_open_a_type = decltype(&mmioOpenA);
using mmio_open_w_type = decltype(&mmioOpenW);
using mmio_rename_a_type = decltype(&mmioRenameA);
using mmio_rename_w_type = decltype(&mmioRenameW);
using mmio_close_type = decltype(&mmioClose);
using mmio_read_type = decltype(&mmioRead);
using mmio_write_type = decltype(&mmioWrite);
using mmio_seek_type = decltype(&mmioSeek);
using mmio_get_info_type = decltype(&mmioGetInfo);
using mmio_set_info_type = decltype(&mmioSetInfo);
using mmio_set_buffer_type = decltype(&mmioSetBuffer);
using mmio_flush_type = decltype(&mmioFlush);
using mmio_advance_type = decltype(&mmioAdvance);
using mmio_send_message_type = decltype(&mmioSendMessage);
using mmio_ascend_type = decltype(&mmioAscend);
using mmio_descend_type = decltype(&mmioDescend);
using mmio_create_chunk_type = decltype(&mmioCreateChunk);
using snd_play_sound_a_type = decltype(&sndPlaySoundA);
using snd_play_sound_w_type = decltype(&sndPlaySoundW);
using time_get_system_time_type = decltype(&timeGetSystemTime);
using time_get_time_type = decltype(&timeGetTime);
using time_get_dev_caps_type = decltype(&timeGetDevCaps);
using time_begin_period_type = decltype(&timeBeginPeriod);
using time_end_period_type = decltype(&timeEndPeriod);
using time_kill_event_type = decltype(&timeKillEvent);
using time_set_event_type = decltype(&timeSetEvent);
using wave_out_get_num_devs_type = decltype(&waveOutGetNumDevs);
using wave_out_get_dev_caps_a_type = decltype(&waveOutGetDevCapsA);
using wave_out_get_dev_caps_w_type = decltype(&waveOutGetDevCapsW);
using wave_out_get_volume_type = decltype(&waveOutGetVolume);
using wave_out_set_volume_type = decltype(&waveOutSetVolume);
using wave_out_get_error_text_a_type = decltype(&waveOutGetErrorTextA);
using wave_out_get_error_text_w_type = decltype(&waveOutGetErrorTextW);
using wave_out_open_type = decltype(&waveOutOpen);
using wave_out_close_type = decltype(&waveOutClose);
using wave_out_prepare_header_type = decltype(&waveOutPrepareHeader);
using wave_out_unprepare_header_type = decltype(&waveOutUnprepareHeader);
using wave_out_write_type = decltype(&waveOutWrite);
using wave_out_pause_type = decltype(&waveOutPause);
using wave_out_restart_type = decltype(&waveOutRestart);
using wave_out_reset_type = decltype(&waveOutReset);
using wave_out_break_loop_type = decltype(&waveOutBreakLoop);
using wave_out_get_position_type = decltype(&waveOutGetPosition);
using wave_out_get_pitch_type = decltype(&waveOutGetPitch);
using wave_out_set_pitch_type = decltype(&waveOutSetPitch);
using wave_out_get_playback_rate_type = decltype(&waveOutGetPlaybackRate);
using wave_out_set_playback_rate_type = decltype(&waveOutSetPlaybackRate);
using wave_out_get_id_type = decltype(&waveOutGetID);
using wave_out_message_type = decltype(&waveOutMessage);
using wave_in_get_num_devs_type = decltype(&waveInGetNumDevs);
using wave_in_get_dev_caps_a_type = decltype(&waveInGetDevCapsA);
using wave_in_get_dev_caps_w_type = decltype(&waveInGetDevCapsW);
using wave_in_get_error_text_a_type = decltype(&waveInGetErrorTextA);
using wave_in_get_error_text_w_type = decltype(&waveInGetErrorTextW);
using wave_in_open_type = decltype(&waveInOpen);
using wave_in_close_type = decltype(&waveInClose);
using wave_in_prepare_header_type = decltype(&waveInPrepareHeader);
using wave_in_unprepare_header_type = decltype(&waveInUnprepareHeader);
using wave_in_add_buffer_type = decltype(&waveInAddBuffer);
using wave_in_start_type = decltype(&waveInStart);
using wave_in_stop_type = decltype(&waveInStop);
using wave_in_reset_type = decltype(&waveInReset);
using wave_in_get_position_type = decltype(&waveInGetPosition);
using wave_in_get_id_type = decltype(&waveInGetID);
using wave_in_message_type = decltype(&waveInMessage);

using wow_app_exit_type = VOID(WINAPI*)();
using mci_execute_type = BOOL(WINAPI*)(LPCSTR);
using mmsystem_get_version_type = UINT(WINAPI*)();
using play_sound_stub_type = decltype(&PlaySoundA);

extern close_driver_type close_driver;
extern open_driver_type open_driver;
extern send_driver_message_type send_driver_message;
extern drv_get_module_handle_type drv_get_module_handle;
extern get_driver_module_handle_type get_driver_module_handle;
extern def_driver_proc_type def_driver_proc;
extern driver_callback_type driver_callback;
extern play_sound_type play_sound;
extern play_sound_a_type play_sound_a;
extern play_sound_w_type play_sound_w;
extern aux_get_num_devs_type aux_get_num_devs;
extern aux_get_dev_caps_a_type aux_get_dev_caps_a;
extern aux_get_dev_caps_w_type aux_get_dev_caps_w;
extern aux_set_volume_type aux_set_volume;
extern aux_get_volume_type aux_get_volume;
extern aux_out_message_type aux_out_message;
extern joy_get_pos_type joy_get_pos;
extern joy_get_threshold_type joy_get_threshold;
extern joy_release_capture_type joy_release_capture;
extern joy_set_capture_type joy_set_capture;
extern joy_set_threshold_type joy_set_threshold;
extern joy_config_changed_type joy_config_changed;
extern joy_get_pos_ex_type joy_get_pos_ex;
extern joy_get_num_devs_type joy_get_num_devs;
extern joy_get_dev_caps_a_type joy_get_dev_caps_a;
extern joy_get_dev_caps_w_type joy_get_dev_caps_w;
extern mci_send_command_a_type mci_send_command_a;
extern mci_send_command_w_type mci_send_command_w;
extern mci_send_string_a_type mci_send_string_a;
extern mci_send_string_w_type mci_send_string_w;
extern mci_get_device_id_a_type mci_get_device_id_a;
extern mci_get_device_id_w_type mci_get_device_id_w;
extern mci_get_device_id_from_element_id_a_type mci_get_device_id_from_element_id_a;
extern mci_get_device_id_from_element_id_w_type mci_get_device_id_from_element_id_w;
extern mci_get_error_string_a_type mci_get_error_string_a;
extern mci_get_error_string_w_type mci_get_error_string_w;
extern mci_set_yield_proc_type mci_set_yield_proc;
extern mci_get_creator_task_type mci_get_creator_task;
extern mci_get_yield_proc_type mci_get_yield_proc;
extern mci_get_driver_data_type mci_get_driver_data;
extern mci_load_command_resource_type mci_load_command_resource;
extern mci_set_driver_data_type mci_set_driver_data;
extern mci_driver_yield_type mci_driver_yield;
extern mci_driver_notify_type mci_driver_notify;
extern mci_free_command_resource_type mci_free_command_resource;
extern midi_out_get_num_devs_type midi_out_get_num_devs;
extern midi_stream_open_type midi_stream_open;
extern midi_stream_close_type midi_stream_close;
extern midi_stream_property_type midi_stream_property;
extern midi_stream_position_type midi_stream_position;
extern midi_stream_out_type midi_stream_out;
extern midi_stream_pause_type midi_stream_pause;
extern midi_stream_restart_type midi_stream_restart;
extern midi_stream_stop_type midi_stream_stop;
extern midi_connect_type midi_connect;
extern midi_disconnect_type midi_disconnect;
extern midi_out_get_dev_caps_a_type midi_out_get_dev_caps_a;
extern midi_out_get_dev_caps_w_type midi_out_get_dev_caps_w;
extern midi_out_get_volume_type midi_out_get_volume;
extern midi_out_set_volume_type midi_out_set_volume;
extern midi_out_get_error_text_a_type midi_out_get_error_text_a;
extern midi_out_get_error_text_w_type midi_out_get_error_text_w;
extern midi_out_open_type midi_out_open;
extern midi_out_close_type midi_out_close;
extern midi_out_prepare_header_type midi_out_prepare_header;
extern midi_out_unprepare_header_type midi_out_unprepare_header;
extern midi_out_short_msg_type midi_out_short_msg;
extern midi_out_long_msg_type midi_out_long_msg;
extern midi_out_reset_type midi_out_reset;
extern midi_out_cache_patches_type midi_out_cache_patches;
extern midi_out_cache_drum_patches_type midi_out_cache_drum_patches;
extern midi_out_get_id_type midi_out_get_id;
extern midi_out_message_type midi_out_message;
extern midi_in_get_num_devs_type midi_in_get_num_devs;
extern midi_in_get_dev_caps_a_type midi_in_get_dev_caps_a;
extern midi_in_get_dev_caps_w_type midi_in_get_dev_caps_w;
extern midi_in_get_error_text_a_type midi_in_get_error_text_a;
extern midi_in_get_error_text_w_type midi_in_get_error_text_w;
extern midi_in_open_type midi_in_open;
extern midi_in_close_type midi_in_close;
extern midi_in_prepare_header_type midi_in_prepare_header;
extern midi_in_unprepare_header_type midi_in_unprepare_header;
extern midi_in_add_buffer_type midi_in_add_buffer;
extern midi_in_start_type midi_in_start;
extern midi_in_stop_type midi_in_stop;
extern midi_in_reset_type midi_in_reset;
extern midi_in_get_id_type midi_in_get_id;
extern midi_in_message_type midi_in_message;
extern mixer_get_num_devs_type mixer_get_num_devs;
extern mixer_get_dev_caps_a_type mixer_get_dev_caps_a;
extern mixer_get_dev_caps_w_type mixer_get_dev_caps_w;
extern mixer_open_type mixer_open;
extern mixer_close_type mixer_close;
extern mixer_message_type mixer_message;
extern mixer_get_line_info_a_type mixer_get_line_info_a;
extern mixer_get_line_info_w_type mixer_get_line_info_w;
extern mixer_get_id_type mixer_get_id;
extern mixer_get_line_controls_a_type mixer_get_line_controls_a;
extern mixer_get_line_controls_w_type mixer_get_line_controls_w;
extern mixer_get_control_details_a_type mixer_get_control_details_a;
extern mixer_get_control_details_w_type mixer_get_control_details_w;
extern mixer_set_control_details_type mixer_set_control_details;
extern mm_drv_install_type mm_drv_install;
extern mm_task_create_type mm_task_create;
extern mm_task_block_type mm_task_block;
extern mm_task_signal_type mm_task_signal;
extern mm_task_yield_type mm_task_yield;
extern mm_get_current_task_type mm_get_current_task;
extern mmio_string_to_fourcc_a_type mmio_string_to_fourcc_a;
extern mmio_string_to_fourcc_w_type mmio_string_to_fourcc_w;
extern mmio_install_io_proc_a_type mmio_install_io_proc_a;
extern mmio_install_io_proc_w_type mmio_install_io_proc_w;
extern mmio_open_a_type mmio_open_a;
extern mmio_open_w_type mmio_open_w;
extern mmio_rename_a_type mmio_rename_a;
extern mmio_rename_w_type mmio_rename_w;
extern mmio_close_type mmio_close;
extern mmio_read_type mmio_read;
extern mmio_write_type mmio_write;
extern mmio_seek_type mmio_seek;
extern mmio_get_info_type mmio_get_info;
extern mmio_set_info_type mmio_set_info;
extern mmio_set_buffer_type mmio_set_buffer;
extern mmio_flush_type mmio_flush;
extern mmio_advance_type mmio_advance;
extern mmio_send_message_type mmio_send_message;
extern mmio_ascend_type mmio_ascend;
extern mmio_descend_type mmio_descend;
extern mmio_create_chunk_type mmio_create_chunk;
extern snd_play_sound_a_type snd_play_sound_a;
extern snd_play_sound_w_type snd_play_sound_w;
extern time_get_system_time_type time_get_system_time;
extern time_get_time_type time_get_time;
extern time_get_dev_caps_type time_get_dev_caps;
extern time_begin_period_type time_begin_period;
extern time_end_period_type time_end_period;
extern time_kill_event_type time_kill_event;
extern time_set_event_type time_set_event;
extern wave_out_get_num_devs_type wave_out_get_num_devs;
extern wave_out_get_dev_caps_a_type wave_out_get_dev_caps_a;
extern wave_out_get_dev_caps_w_type wave_out_get_dev_caps_w;
extern wave_out_get_volume_type wave_out_get_volume;
extern wave_out_set_volume_type wave_out_set_volume;
extern wave_out_get_error_text_a_type wave_out_get_error_text_a;
extern wave_out_get_error_text_w_type wave_out_get_error_text_w;
extern wave_out_open_type wave_out_open;
extern wave_out_close_type wave_out_close;
extern wave_out_prepare_header_type wave_out_prepare_header;
extern wave_out_unprepare_header_type wave_out_unprepare_header;
extern wave_out_write_type wave_out_write;
extern wave_out_pause_type wave_out_pause;
extern wave_out_restart_type wave_out_restart;
extern wave_out_reset_type wave_out_reset;
extern wave_out_break_loop_type wave_out_break_loop;
extern wave_out_get_position_type wave_out_get_position;
extern wave_out_get_pitch_type wave_out_get_pitch;
extern wave_out_set_pitch_type wave_out_set_pitch;
extern wave_out_get_playback_rate_type wave_out_get_playback_rate;
extern wave_out_set_playback_rate_type wave_out_set_playback_rate;
extern wave_out_get_id_type wave_out_get_id;
extern wave_out_message_type wave_out_message;
extern wave_in_get_num_devs_type wave_in_get_num_devs;
extern wave_in_get_dev_caps_a_type wave_in_get_dev_caps_a;
extern wave_in_get_dev_caps_w_type wave_in_get_dev_caps_w;
extern wave_in_get_error_text_a_type wave_in_get_error_text_a;
extern wave_in_get_error_text_w_type wave_in_get_error_text_w;
extern wave_in_open_type wave_in_open;
extern wave_in_close_type wave_in_close;
extern wave_in_prepare_header_type wave_in_prepare_header;
extern wave_in_unprepare_header_type wave_in_unprepare_header;
extern wave_in_add_buffer_type wave_in_add_buffer;
extern wave_in_start_type wave_in_start;
extern wave_in_stop_type wave_in_stop;
extern wave_in_reset_type wave_in_reset;
extern wave_in_get_position_type wave_in_get_position;
extern wave_in_get_id_type wave_in_get_id;
extern wave_in_message_type wave_in_message;

extern wow_app_exit_type wow_app_exit;
extern mci_execute_type mci_execute;
extern mmsystem_get_version_type mmsystem_get_version;
extern play_sound_stub_type play_sound_stub;
} // namespace red3ext
